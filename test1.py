from typing import Final
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext, Updater

## API —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Ç–∞ –Ω–∞–∑–≤–∞
TOKEN: Final = '7824502490:AAEacrJ8XMEoxuky3l2rKkNZyT_q5wnXLbQ'
BOT_USERNAME = '@money_expenses_control_bot'

## –°—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø–æ—á–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá",
        reply_markup=reply_markup
    )

## –ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î "–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏"
async def handle_start_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏":
        await show_main_menu(update)

## –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def show_main_menu(update: Update):
    keyboard = [
        [KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–±—É—Ç–æ–∫"), KeyboardButton("üìà –ü–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–∏–±—É—Ç–∫—É"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É"), KeyboardButton("üìâ –ü–µ—Ä–µ–≥–ª—è–¥ –≤–∏—Ç—Ä–∞—Ç"), KeyboardButton("üî¢ –õ—ñ–º—ñ—Ç–∏")],
        [KeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–æ–º")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("‚úÖ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=reply_markup)

## –ú–µ–Ω—é –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∏–±—É—Ç–∫—É
async def show_after_adding_profit_menu(update: Update):
    context.user_data["previous_menu"] = "after_adding_profit"
    keyboard = [
        [KeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")],
        [KeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Å—É–º—É")],
        [KeyboardButton("üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä")],
        [KeyboardButton("üìÖ –î–∞—Ç–∞")],
        [KeyboardButton("üìå –î–∂–µ—Ä–µ–ª–æ")],
        [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("‚úîÔ∏è –©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?", reply_markup=reply_markup)

## –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–æ–¥—É –¥–∂–µ—Ä–µ–ª (–≤ –î–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–∏–±—É—Ç–∫—É)
async def show_sources_menu(update: Update):
    keyboard = [
        [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 1"), KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 2")],
        [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 3"), KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 4")],
        [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 5"), KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 6")],
        [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 7"), KeyboardButton("–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏")],
        [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ –ø—Ä–∏–±—É—Ç–∫—É:",
        reply_markup=reply_markup
    )

## –í–∏–≤—ñ–¥ –º–µ–Ω—é –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–î–∞—Ç–∞" (–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∏–±—É—Ç–∫—É)
async def show_date_menu(update: Update):
    keyboard = [
        [KeyboardButton("–°—å–æ–≥–æ–¥–Ω—ñ"), KeyboardButton("–í—á–æ—Ä–∞")],
        [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy",
        reply_markup=reply_markup
    )

## –í–∏–≤—ñ–¥ –º–µ–Ω—é –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–ö–æ–º–µ–Ω—Ç–∞—Ä" (–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∏–±—É—Ç–∫—É)
async def show_comment_menu(update: Update):
    keyboard = [[KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üí¨ –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä:",
        reply_markup=reply_markup
    )

## –ú–µ–Ω—é –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ (–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏)
async def show_after_adding_expense_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["previous_menu"] = "after_adding_expense"
    keyboard = [
        [KeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")],
        [KeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Å—É–º—É")],
        [KeyboardButton("üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä")],
        [KeyboardButton("üìÖ –î–∞—Ç–∞")],
        [KeyboardButton("üìå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è")]
    ]

    # –Ø–∫—â–æ –æ–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è, –¥–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    if context.user_data.get("selected_category"):
        keyboard.append([KeyboardButton("üìÇ –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è")])

    keyboard.append([KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("‚úîÔ∏è –©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?", reply_markup=reply_markup)

## –ú–µ–Ω—é –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è" (–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏)
async def show_categories_menu(update: Update):
    keyboard = [
        [KeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 1"), KeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 2")],
        [KeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 3"), KeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 4")],
        [KeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 5"), KeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 6")],
        [KeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 7"), KeyboardButton("–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏")],
        [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üóÇÔ∏è –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç–∏:",
        reply_markup=reply_markup
    )

## –ú–µ–Ω—é –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è" (–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏)
async def show_subcategories_menu(update: Update):
    keyboard = [
        [KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 1"), KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 2")],
        [KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 3"), KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 4")],
        [KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 5"), KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 6")],
        [KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 7"), KeyboardButton("–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏")],
        [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üìÇ –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
        reply_markup=reply_markup
    )

## –í–∏–≤—ñ–¥ –º–µ–Ω—é –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–î–∞—Ç–∞" (–¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏)
async def show_expense_date_menu(update: Update):
    keyboard = [
        [KeyboardButton("–°—å–æ–≥–æ–¥–Ω—ñ"), KeyboardButton("–í—á–æ—Ä–∞")],
        [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy",
        reply_markup=reply_markup
    )

## –ú–µ–Ω—é –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É "üìà –ü–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–∏–±—É—Ç–∫—É"
async def show_profit_period_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–ó–∞ –≤–µ—Å—å —á–∞—Å")],
        [KeyboardButton("–ó–∞ —Ä—ñ–∫")],
        [KeyboardButton("–ó–∞ –º—ñ—Å—è—Ü—å")],
        [KeyboardButton("–ó–∞ —Ç–∏–∂–¥–µ–Ω—å")],
        [KeyboardButton("–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")],
        [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ —É –º–µ–Ω—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy:dd/mm/yyyy",
        reply_markup=reply_markup
    )

# –ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î "‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–±—É—Ç–æ–∫"
async def add_profit_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–±—É—Ç–æ–∫":
        context.user_data["awaiting_profit_sum"] = True  # –ß–µ–∫–∞—î–º–æ —Å—É–º—É
        keyboard = [[KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–©–æ–± –¥–æ–¥–∞—Ç–∏ –ø—Ä–∏–±—É—Ç–æ–∫, –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É:",
            reply_markup=reply_markup
        )

## –ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î "‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É"
async def add_expense_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É":
        context.user_data["awaiting_expense_sum"] = True  # –ß–µ–∫–∞—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ –≤–∏—Ç—Ä–∞—Ç–∏
        keyboard = [[KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üí∏ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç:",
            reply_markup=reply_markup
        )

async def show_statistics_menu(update: Update):
    keyboard = [
        [KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—É—Ç–∫—É")],
        [KeyboardButton("üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç")],
        [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üìä –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=reply_markup
    )

async def show_graphs_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, all_sources: bool):
    # –ú–µ–Ω—é –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –≤–∞—Ä—ñ–∞–Ω—Ç—É
    context.user_data["previous_menu"] = "graphs_menu"
    if all_sources:
        keyboard = [
            [KeyboardButton("Pie Chart")],
            [KeyboardButton("Bars")],
            [KeyboardButton("Scatter Plot")],
            [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
            [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ]
    else:
        keyboard = [
            [KeyboardButton("Bars")],
            [KeyboardButton("Scatter Plot")],
            [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
            [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üìä –û–±–µ—Ä—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è:",
        reply_markup=reply_markup
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Ä–µ–∂–∏–º—ñ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏
    if context.user_data.get("awaiting_profit_sum"):
        if text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            context.user_data["awaiting_profit_sum"] = False
            await show_main_menu(update)
            return
        try:
            profit = float(text)
            await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ –ø—Ä–∏–±—É—Ç–æ–∫: {profit} –≥—Ä–Ω")
            context.user_data["profit_sum"] = profit ## –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤ –ë–î
            context.user_data["awaiting_profit_sum"] = False
            await show_after_adding_profit_menu(update)
        except ValueError:
            await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ!")
        return

        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" —É –±—É–¥—å-—è–∫–æ–º—É –º—ñ—Å—Ü—ñ
    if text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await show_main_menu(update)
        return

    if text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏":
        if context.user_data.get("awaiting_profit_sum") or context.user_data.get("profit_sum"):
            # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –ø—Ä–∏–±—É—Ç–∫—É
            profit_sum = context.user_data.get("profit_sum", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            source = context.user_data.get("selected_source", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            date = context.user_data.get("selected_date", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            comment = context.user_data.get("comment", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            # –¢–£–¢: SQL –¥–ª—è –ø—Ä–∏–±—É—Ç–∫—É (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
            result_message = (
                f"‚úÖ –ü—Ä–∏–±—É—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!\n\n"
                f"üí∞ –°—É–º–∞: {profit_sum}\n"
                f"üìå –î–∂–µ—Ä–µ–ª–æ: {source}\n"
                f"üóìÔ∏è –î–∞—Ç–∞: {date}\n"
                f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}"
            )
        elif context.user_data.get("awaiting_expense_sum") or context.user_data.get("expense_sum"):
            # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –≤–∏—Ç—Ä–∞—Ç–∏
            expense_sum = context.user_data.get("expense_sum", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            category = context.user_data.get("selected_category", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            subcategory = context.user_data.get("selected_subcategory", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            date = context.user_data.get("selected_date", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            comment = context.user_data.get("comment", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            # –¢–£–¢: SQL –¥–ª—è –≤–∏—Ç—Ä–∞—Ç–∏ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
            result_message = (
                f"‚úÖ –í–∏—Ç—Ä–∞—Ç—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!\n\n"
                f"üí∏ –°—É–º–∞: {expense_sum}\n"
                f"üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n"
                f"üìÇ –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {subcategory}\n"
                f"üóìÔ∏è –î–∞—Ç–∞: {date}\n"
                f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}"
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
            return

        await update.message.reply_text(result_message)
        context.user_data.clear()
        await show_main_menu(update)
        return

    if text == "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Å—É–º—É":
        context.user_data["awaiting_profit_sum"] = True
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Å—É–º—É:")
        return

    if text == "üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä":
        context.user_data["awaiting_comment_input"] = True
        # –í–∞–∂–ª–∏–≤–æ: –≤–∫–∞–∑—É—î–º–æ, –¥–ª—è —á–æ–≥–æ —Ü–µ–π –∫–æ–º–µ–Ω—Ç–∞—Ä
        context.user_data["current_mode"] = "profit" if context.user_data.get("awaiting_profit_sum") else "expense"
        await show_comment_menu(update)
        return

    if text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
        previous_menu = context.user_data.get("previous_menu", "main_menu")

        if previous_menu == "after_adding_expense":
            await show_after_adding_expense_menu(update, context)
        elif previous_menu == "after_adding_profit":
            await show_after_adding_profit_menu(update)
        elif previous_menu == "statistics":
            await show_statistics_menu(update)
            context.user_data["previous_menu"] = "main_menu"
        elif previous_menu == "graphs_menu":
            await show_graphs_menu(update, context, all_sources=context.user_data.get("graph_all_sources", False))
        else:
            await show_main_menu(update)
        return

    ## –¥–∞—Ç–∞
    if text == "üìÖ –î–∞—Ç–∞":
        context.user_data["awaiting_date_input"] = True
        # –í–∞–∂–ª–∏–≤–æ: –≤–∫–∞–∑—É—î–º–æ, –¥–µ –º–∏ ‚Äì —É –ø—Ä–∏–±—É—Ç–∫—É —á–∏ –≤–∏—Ç—Ä–∞—Ç—ñ
        context.user_data["current_mode"] = "profit" if context.user_data.get("awaiting_profit_sum") else "expense"
        await show_date_menu(update)
        return

    if text == "üìå –î–∂–µ—Ä–µ–ª–æ":
        await show_sources_menu(update)
        return

    if text in ["–î–∂–µ—Ä–µ–ª–æ 1", "–î–∂–µ—Ä–µ–ª–æ 2", "–î–∂–µ—Ä–µ–ª–æ 3", "–î–∂–µ—Ä–µ–ª–æ 4", "–î–∂–µ—Ä–µ–ª–æ 5", "–î–∂–µ—Ä–µ–ª–æ 6", "–î–∂–µ—Ä–µ–ª–æ 7",
                "–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏"]:
        await update.message.reply_text(f"‚úÖ –î–∂–µ—Ä–µ–ª–æ –æ–±—Ä–∞–Ω–æ: {text}")
        ## –¢—É—Ç —Ç—Ä–µ–±–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ SQL-–∑–∞–ø–∏—Ç 1

        ##
        context.user_data["selected_source"] = text ## –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤ –ë–î
        await show_after_adding_profit_menu(update)
        return


    ## –í–≤–µ–¥–µ–Ω–Ω—è —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞—Ç–∏ –¥–ª—è –ø—Ä–∏–±—É—Ç–∫—É —Ç–∞ –≤–∏—Ç—Ä–∞—Ç
    if context.user_data.get("awaiting_date_input"):
        if text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            context.user_data["awaiting_date_input"] = False
            if context.user_data.get("current_mode") == "profit":
                await show_after_adding_profit_menu(update)
            else:
                await show_after_adding_expense_menu(update, context)
            return

        if text == "–°—å–æ–≥–æ–¥–Ω—ñ":
            date = datetime.now().strftime("%d/%m/%Y")
            context.user_data["selected_date"] = date
            await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {date}")
            context.user_data["awaiting_date_input"] = False
            if context.user_data.get("current_mode") == "profit":
                await show_after_adding_profit_menu(update)
            else:
                await show_after_adding_expense_menu(update, context)
            return

        if text == "–í—á–æ—Ä–∞":
            date = (datetime.now() - timedelta(days=1)).strftime("%d/%m/%Y")
            context.user_data["selected_date"] = date
            await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {date}")
            context.user_data["awaiting_date_input"] = False
            if context.user_data.get("current_mode") == "profit":
                await show_after_adding_profit_menu(update)
            else:
                await show_after_adding_expense_menu(update, context)
            return

        try:
            parsed_date = datetime.strptime(text, "%d/%m/%Y")
            context.user_data["selected_date"] = text
            await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {text}")
            context.user_data["awaiting_date_input"] = False
            if context.user_data.get("current_mode") == "profit":
                await show_after_adding_profit_menu(update)
            else:
                await show_after_adding_expense_menu(update, context)
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 05/06/2025"
            )
        return

    ## –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
    if context.user_data.get("awaiting_comment_input"):
        if text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            context.user_data["awaiting_comment_input"] = False
            if context.user_data.get("current_mode") == "profit":
                await show_after_adding_profit_menu(update)
            else:
                await show_after_adding_expense_menu(update, context)
            return

        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è: –¥–æ–≤–∂–∏–Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—è –≤—ñ–¥ 3 –¥–æ 200
        if 3 <= len(text) <= 200:
            context.user_data["comment"] = text
            await update.message.reply_text("‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ!")
            context.user_data["awaiting_comment_input"] = False
            if context.user_data.get("current_mode") == "profit":
                await show_after_adding_profit_menu(update)
            else:
                await show_after_adding_expense_menu(update, context)
        else:
            await update.message.reply_text(
                "‚ùå –ö–æ–º–µ–Ω—Ç–∞—Ä –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 3 –¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!"
            )
        return

    ## –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ –≤–∏—Ç—Ä–∞—Ç (–î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É)
    if context.user_data.get("awaiting_expense_sum"):
        if text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            context.user_data["awaiting_expense_sum"] = False
            await show_main_menu(update)
            return

        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è: —á–∏—Å–ª–æ > 0 —ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, < 100000
        try:
            expense = float(text)
            if expense <= 0 or expense > 100000:
                await update.message.reply_text("‚ùå –°—É–º–∞ –º–∞—î –±—É—Ç–∏ > 0 —ñ < 100000. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!")
                return
            context.user_data["expense_sum"] = expense
            await update.message.reply_text(f"‚úÖ –°—É–º—É –≤–∏—Ç—Ä–∞—Ç –¥–æ–¥–∞–Ω–æ: {expense} –≥—Ä–Ω")
            context.user_data["awaiting_expense_sum"] = False
            await show_after_adding_expense_menu(update, context)
        except ValueError:
            await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ!")
        return

    if text == "üìå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è":
        context.user_data["awaiting_category_input"] = True
        await show_categories_menu(update)
        return

    ## –í–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç
    if context.user_data.get("awaiting_category_input"):
        if text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            context.user_data["awaiting_category_input"] = False
            await show_after_adding_expense_menu(update, context)
            return
        if text in ["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 1", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 2", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 3", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 4", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 5", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 6",
                    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 7", "–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏"]:
            await update.message.reply_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –æ–±—Ä–∞–Ω–∞: {text}")
            context.user_data["selected_category"] = text
            ## –¢—É—Ç —Ç—Ä–µ–±–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ SQL-–∑–∞–ø–∏—Ç 3

            ##
            context.user_data["awaiting_category_input"] = False
            await show_after_adding_expense_menu(update, context)
        else:
            await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É!")
        return

    if text == "üìÇ –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è":
        context.user_data["awaiting_subcategory_input"] = True
        await show_subcategories_menu(update)
        return

    ## –º–µ–Ω—é –¥–ª—è –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π (–¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç)
    if context.user_data.get("awaiting_subcategory_input"):
        if text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            context.user_data["awaiting_subcategory_input"] = False
            await show_after_adding_expense_menu(update, context)
            return
        if text in ["–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 1", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 2", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 3", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 4", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 5",
                    "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 6", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 7", "–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏"]:
            await update.message.reply_text(f"‚úÖ –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è –æ–±—Ä–∞–Ω–∞: {text}")
            context.user_data["selected_subcategory"] = text
            ## –¢—É—Ç —Ç—Ä–µ–±–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ SQL-–∑–∞–ø–∏—Ç 4

            ##
            context.user_data["awaiting_subcategory_input"] = False
            await show_after_adding_expense_menu(update, context)
        else:
            await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É!")
        return

    if text == "üìà –ü–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–∏–±—É—Ç–∫—É":
        await show_profit_period_menu(update, context)
        return

    # –ü–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–∏–±—É—Ç–∫—É: –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä—ñ–æ–¥—É ## SQL-–∑–∞–ø–∏—Ç 7
    ## UPD: –¢—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –≤–∏–≤–µ–¥–µ–Ω–Ω—è –ø–æ 10 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    if context.user_data.get("awaiting_profit_period_input"):
        if text == "–ó–∞ –≤–µ—Å—å —á–∞—Å":
            await update.message.reply_text("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞ –≤–µ—Å—å —á–∞—Å.")
            # –¢–£–¢: SQL-–∑–∞–ø–∏—Ç ‚Ññ7 ‚Äî –≤—Å—ñ –∑–∞–ø–∏—Å–∏
            context.user_data["awaiting_profit_period_input"] = False
            return

        if text == "–ó–∞ —Ä—ñ–∫":
            start_date = (datetime.now() - timedelta(days=365)).strftime("%d/%m/%Y")
            end_date = datetime.now().strftime("%d/%m/%Y")
            await update.message.reply_text(f"‚úÖ –ü–µ—Ä—ñ–æ–¥: {start_date} ‚Äî {end_date}")
            # –¢–£–¢: SQL-–∑–∞–ø–∏—Ç ‚Ññ7 ‚Äî –∑–∞–ø–∏—Å–∏ –∑–∞ —Ä—ñ–∫
            context.user_data["awaiting_profit_period_input"] = False
            return

        if text == "–ó–∞ –º—ñ—Å—è—Ü—å":
            start_date = (datetime.now() - timedelta(days=30)).strftime("%d/%m/%Y")
            end_date = datetime.now().strftime("%d/%m/%Y")
            await update.message.reply_text(f"‚úÖ –ü–µ—Ä—ñ–æ–¥: {start_date} ‚Äî {end_date}")
            # –¢–£–¢: SQL-–∑–∞–ø–∏—Ç ‚Ññ7 ‚Äî –∑–∞–ø–∏—Å–∏ –∑–∞ –º—ñ—Å—è—Ü—å
            context.user_data["awaiting_profit_period_input"] = False
            return

        if text == "–ó–∞ —Ç–∏–∂–¥–µ–Ω—å":
            start_date = (datetime.now() - timedelta(days=7)).strftime("%d/%m/%Y")
            end_date = datetime.now().strftime("%d/%m/%Y")
            await update.message.reply_text(f"‚úÖ –ü–µ—Ä—ñ–æ–¥: {start_date} ‚Äî {end_date}")
            # –¢–£–¢: SQL-–∑–∞–ø–∏—Ç ‚Ññ7 ‚Äî –∑–∞–ø–∏—Å–∏ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
            context.user_data["awaiting_profit_period_input"] = False
            return

        if text == "–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ":
            date = datetime.now().strftime("%d/%m/%Y")
            await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞: {date}")
            # –¢–£–¢: SQL-–∑–∞–ø–∏—Ç ‚Ññ7 ‚Äî –∑–∞–ø–∏—Å–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
            context.user_data["awaiting_profit_period_input"] = False
            return

    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–≤–µ–¥–µ–Ω–æ–≥–æ –≤—Ä—É—á–Ω—É –ø–µ—Ä—ñ–æ–¥—É (—è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ)
    if ":" in text and context.user_data.get("awaiting_profit_period_input"):
        try:
            start_str, end_str = text.split(":")
            start_date = datetime.strptime(start_str.strip(), "%d/%m/%Y")
            end_date = datetime.strptime(end_str.strip(), "%d/%m/%Y")
            if start_date > end_date:
                await update.message.reply_text("‚ùå –ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—ñ–∑–Ω—ñ—à–æ—é –∑–∞ –∫—ñ–Ω—Ü–µ–≤—É!")
                return

            #### –¢—É—Ç —Ç—Ä–µ–±–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ SQL-–∑–∞–ø–∏—Ç ‚Ññ7
            await update.message.reply_text(f"‚úÖ –ü–µ—Ä—ñ–æ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {start_str} ‚Äî {end_str}")
            context.user_data["awaiting_profit_period_input"] = False
            ####
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy:dd/mm/yyyy"
            )
        return

    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_statistics_menu(update)
        context.user_data["previous_menu"] = "main_menu"
        return

    # ‚û°Ô∏è –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É ‚Ññ8 (–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—É—Ç–∫—É)
    if text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—É—Ç–∫—É":
        keyboard = [
            [KeyboardButton("–ó–∞ –≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥"), KeyboardButton("–ó–∞ —Ä—ñ–∫")],
            [KeyboardButton("–ó–∞ –º—ñ—Å—è—Ü—å"), KeyboardButton("–ó–∞ —Ç–∏–∂–¥–µ–Ω—å")],
            [KeyboardButton("–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"), KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy:dd/mm/yyyy",
            reply_markup=reply_markup
        )
        # –°—Ç–∞–≤–∏–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–∞–∑ –≤–≤–æ–¥–∏—Ç—å –ø–µ—Ä—ñ–æ–¥
        context.user_data["awaiting_period_input"] = True
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Ä–µ–∂–∏–º—ñ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É
    if context.user_data.get("awaiting_period_input"):
        if text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            context.user_data["awaiting_period_input"] = False
            await show_main_menu(update)
            return

        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è: –º–∞—î –±—É—Ç–∏ —Ñ–æ—Ä–º–∞—Ç dd/mm/yyyy:dd/mm/yyyy
        try:
            period_parts = text.split(":")
            if len(period_parts) == 2:
                datetime.strptime(period_parts[0], "%d/%m/%Y")
                datetime.strptime(period_parts[1], "%d/%m/%Y")
                context.user_data["selected_period"] = text
                context.user_data["awaiting_period_input"] = False
                await update.message.reply_text("‚úÖ –ü–µ—Ä—ñ–æ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

                # –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é ¬´–ó–∞ –≤—Å—ñ–º–∞ –¥–∂–µ—Ä–µ–ª–∞–º–∏¬ª / ¬´–û–±—Ä–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ¬ª
                keyboard = [
                    [KeyboardButton("–ó–∞ —É—Å—ñ–º–∞ –¥–∂–µ—Ä–µ–ª–∞–º–∏")],
                    [KeyboardButton("–û–±—Ä–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ")],
                    [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
                    [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text("üîç –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
            else:
                raise ValueError  # —â–æ–± —Å–ø—Ä–∞—Ü—é–≤–∞–≤ except
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy:dd/mm/yyyy, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 01/01/2024:31/12/2024"
            )
        return

    if text == "–ó–∞ —É—Å—ñ–º–∞ –¥–∂–µ—Ä–µ–ª–∞–º–∏":
        context.user_data["graph_all_sources"] = True
        await show_graphs_menu(update, context, all_sources=True)
        context.user_data["previous_menu"] = "statistics"
        return

    if text == "–û–±—Ä–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ":
        context.user_data["graph_all_sources"] = False
        keyboard = [
            [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 1"), KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 2")],
            [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 3"), KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 4")],
            [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 5"), KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 6")],
            [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 7"), KeyboardButton("–ù–µ –≤–∫–∞–∑–∞–Ω–æ")],
            [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
            [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ:", reply_markup=reply_markup)
        context.user_data["previous_menu"] = "statistics"
        return


# ‚û°Ô∏è –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Update {update} caused error {context.error}")

# ‚û°Ô∏è –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
def main():
    print("‚úÖ –°—Ç–∞—Ä—Ç—É—î–º–æ –±–æ—Ç–∞...")
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏$"), handle_start_button))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–±—É—Ç–æ–∫$"), add_profit_button))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É$"), add_expense_button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_error_handler(error)

    print("ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î (polling)...")
    application.run_polling(poll_interval=1)

if __name__ == "__main__":
    main()