from typing import Final
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext, Updater

## API —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Ç–∞ –Ω–∞–∑–≤–∞
TOKEN: Final = ''
BOT_USERNAME = '@banderaounbot'

## –°—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø–æ—á–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá",
        reply_markup=reply_markup
    )

## –ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î "–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏"
async def handle_start_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏":
        await show_main_menu(update, context)

## –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keys_to_clear = [   ## –í–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø—Ä–∞–ø–æ—Ä—Ü—è–º–∏
        "awaiting_period_input",
        "awaiting_expense_period_input",
        "awaiting_comment_input",
        "awaiting_expense_sum",
        "awaiting_profit_sum",
        "awaiting_date_input",
        "awaiting_source_selection",
        "awaiting_category_input",
        "awaiting_subcategory_input"
    ]
    for key in keys_to_clear:
        context.user_data.pop(key, None)
    keyboard = [
        [KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–±—É—Ç–æ–∫"), KeyboardButton("üìà –ü–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–∏–±—É—Ç–∫—É"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É"), KeyboardButton("üìâ –ü–µ—Ä–µ–≥–ª—è–¥ –≤–∏—Ç—Ä–∞—Ç"), KeyboardButton("üî¢ –õ—ñ–º—ñ—Ç–∏")],
        [KeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–æ–º")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("‚úÖ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=reply_markup)

## –ú–µ–Ω—é –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∏–±—É—Ç–∫—É
async def show_after_adding_profit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["previous_menu"] = "after_adding_profit"
    keyboard = [
        [KeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")],
        [KeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Å—É–º—É")],
        [KeyboardButton("üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä")],
        [KeyboardButton("üìÖ –î–∞—Ç–∞")],
        [KeyboardButton("üìå –î–∂–µ—Ä–µ–ª–æ")],
        [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("‚úîÔ∏è –©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?", reply_markup=reply_markup)

## –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–æ–¥—É –¥–∂–µ—Ä–µ–ª (–≤ –î–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–∏–±—É—Ç–∫—É)
async def show_sources_menu(update: Update):
    keyboard = [
        [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 1"), KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 2")],
        [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 3"), KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 4")],
        [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 5"), KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 6")],
        [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 7"), KeyboardButton("–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏")],
        [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ –ø—Ä–∏–±—É—Ç–∫—É:",
        reply_markup=reply_markup
    )

## –í–∏–≤—ñ–¥ –º–µ–Ω—é –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–î–∞—Ç–∞" (–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∏–±—É—Ç–∫—É)
async def show_date_menu(update: Update):
    keyboard = [
        [KeyboardButton("–°—å–æ–≥–æ–¥–Ω—ñ"), KeyboardButton("–í—á–æ—Ä–∞")],
        [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy",
        reply_markup=reply_markup
    )

## –í–∏–≤—ñ–¥ –º–µ–Ω—é –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–ö–æ–º–µ–Ω—Ç–∞—Ä" (–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∏–±—É—Ç–∫—É)
async def show_comment_menu(update: Update):
    keyboard = [[KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üí¨ –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä:",
        reply_markup=reply_markup
    )

## –ú–µ–Ω—é –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ (–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏)
async def show_after_adding_expense_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["previous_menu"] = "after_adding_expense"
    keyboard = [
        [KeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")],
        [KeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Å—É–º—É")],
        [KeyboardButton("üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä")],
        [KeyboardButton("üìÖ –î–∞—Ç–∞")],
        [KeyboardButton("üìå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è")]
    ]

    # –Ø–∫—â–æ –æ–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è, –¥–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    if context.user_data.get("selected_category"):
        keyboard.append([KeyboardButton("üìÇ –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è")])

    keyboard.append([KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("‚úîÔ∏è –©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?", reply_markup=reply_markup)

## –ú–µ–Ω—é –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è" (–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏)
async def show_categories_menu(update: Update):
    keyboard = [
        [KeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 1"), KeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 2")],
        [KeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 3"), KeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 4")],
        [KeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 5"), KeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 6")],
        [KeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 7"), KeyboardButton("–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏")],
        [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üóÇÔ∏è –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç–∏:",
        reply_markup=reply_markup
    )

## –ú–µ–Ω—é –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è" (–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏)
async def show_subcategories_menu(update: Update):
    keyboard = [
        [KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 1"), KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 2")],
        [KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 3"), KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 4")],
        [KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 5"), KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 6")],
        [KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 7"), KeyboardButton("–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏")],
        [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üìÇ –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
        reply_markup=reply_markup
    )

async def show_expense_subcategories_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # üî¥ –¢—É—Ç –±—É–¥–µ SQL-–∑–∞–ø–∏—Ç, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ø—ñ–¥—Ç—è–≥—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑ –ë–î: subcategories = get_subcategories(category_id)

    # –ó–∞–≥–ª—É—à–∫–∞-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç—É
    keyboard = [
        [KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 1"), KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 2")],
        [KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 3"), KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 4")],
        [KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 5"), KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 6")],
        [KeyboardButton("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 7"), KeyboardButton("–ù–µ –≤–∫–∞–∑–∞–Ω–æ")],
        [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è"), KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üìÇ –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç–∏:",
        reply_markup=reply_markup
    )
    context.user_data["previous_menu"] = "choose_expense_subcategory"

## –í–∏–≤—ñ–¥ –º–µ–Ω—é –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–î–∞—Ç–∞" (–¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏)
async def show_expense_date_menu(update: Update):
    keyboard = [
        [KeyboardButton("–°—å–æ–≥–æ–¥–Ω—ñ"), KeyboardButton("–í—á–æ—Ä–∞")],
        [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy",
        reply_markup=reply_markup
    )

## –ú–µ–Ω—é –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É "üìà –ü–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–∏–±—É—Ç–∫—É"
async def show_profit_period_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–ó–∞ –≤–µ—Å—å —á–∞—Å")],
        [KeyboardButton("–ó–∞ —Ä—ñ–∫")],
        [KeyboardButton("–ó–∞ –º—ñ—Å—è—Ü—å")],
        [KeyboardButton("–ó–∞ —Ç–∏–∂–¥–µ–Ω—å")],
        [KeyboardButton("–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")],
        [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ —É –º–µ–Ω—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy:dd/mm/yyyy",
        reply_markup=reply_markup
    )

# –ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î "‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–±—É—Ç–æ–∫"
async def add_profit_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–±—É—Ç–æ–∫":
        context.user_data["awaiting_profit_sum"] = True  # –ß–µ–∫–∞—î–º–æ —Å—É–º—É
        keyboard = [[KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–©–æ–± –¥–æ–¥–∞—Ç–∏ –ø—Ä–∏–±—É—Ç–æ–∫, –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É:",
            reply_markup=reply_markup
        )

## –ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î "‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É"
async def add_expense_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É":
        context.user_data["awaiting_expense_sum"] = True  # –ß–µ–∫–∞—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ –≤–∏—Ç—Ä–∞—Ç–∏
        keyboard = [[KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üí∏ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç:",
            reply_markup=reply_markup
        )

async def show_statistics_menu(update: Update):
    keyboard = [
        [KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—É—Ç–∫—É")],
        [KeyboardButton("üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç")],
        [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üìä –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=reply_markup
    )

async def show_graphs_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, all_sources: bool):
    # –ú–µ–Ω—é –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –≤–∞—Ä—ñ–∞–Ω—Ç—É
    context.user_data["previous_menu"] = "graphs_menu"
    if all_sources:
        keyboard = [
            [KeyboardButton("Pie Chart")],
            [KeyboardButton("Bars")],
            [KeyboardButton("Scatter Plot")],
            [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
            [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ]
    else:
        keyboard = [
            [KeyboardButton("Bars")],
            [KeyboardButton("Scatter Plot")],
            [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
            [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üìä –û–±–µ—Ä—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è:",
        reply_markup=reply_markup
    )

async def show_limits_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–ú–æ—ó –ª—ñ–º—ñ—Ç–∏")],
        [KeyboardButton("–ù–æ–≤–∏–π –ª—ñ–º—ñ—Ç")],
        [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üîí –ú–µ–Ω—é –ª—ñ–º—ñ—Ç—ñ–≤:", reply_markup=reply_markup)
    context.user_data["previous_menu"] = "limits_list"


async def show_user_limits_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # üî¥ –ü–Ü–î SQL: –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ª—ñ–º—ñ—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    # limits = get_user_limits(user_id)
    limits = ["–õ—ñ–º—ñ—Ç 1", "–õ—ñ–º—ñ—Ç 2", "–õ—ñ–º—ñ—Ç 3"]  # –ó–∞–≥–ª—É—à–∫–∞

    keyboard = [[KeyboardButton(limit)] for limit in limits]
    keyboard.append([KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è"), KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üìù –û–±–µ—Ä—ñ—Ç—å –ª—ñ–º—ñ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
        reply_markup=reply_markup
    )
    context.user_data["previous_menu"] = "limits_menu"

async def show_limit_details(update: Update, context: ContextTypes.DEFAULT_TYPE, limit_name: str):
    # üî¥ –ü–Ü–î SQL (–∑–∞–ø–∏—Ç ‚Ññ15): –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ª—ñ–º—ñ—Ç—É –∑–∞ –Ω–∞–∑–≤–æ—é limit_name
    # details = get_limit_details(limit_name)
    details = "–°—É–º–∞: 1000 –≥—Ä–Ω\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: –ö–∞—Ç–µ–≥–æ—Ä—ñ—è 1\n–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è: –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 2\n–ü–µ—Ä—ñ–æ–¥: –ú—ñ—Å—è—Ü—å"  # –ó–∞–≥–ª—É—à–∫–∞

    await update.message.reply_text(
        f"‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ª—ñ–º—ñ—Ç:\n\n{details}"
    )

    keyboard = [
        [KeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏")],
        [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
        [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    context.user_data["previous_menu"] = "limit_details"
    await update.message.reply_text(
        "üõ†Ô∏è –©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∑ –ª—ñ–º—ñ—Ç–æ–º?",
        reply_markup=reply_markup
    )

async def handle_new_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—ñ–¥ SQL-–∑–∞–ø–∏—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª—ñ–º—ñ—Ç—ñ–≤
    # üî¥ SQL-–∑–∞–ø–∏—Ç ‚Ññ13 (–ø–æ–∫–∏ –ª–∏—à–∞—î–º–æ –º—ñ—Å—Ü–µ)
    user_id = update.effective_user.id
    # –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–ª—ñ–º—ñ—Ç—ñ–≤ = db.get_user_limits_count(user_id) # –∑–∞–≥–ª—É—à–∫–∞

    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥)
    limits_count = 5  # –∑–∞–º—ñ–Ω–∏ —Ü–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç

    if limits_count >= 8:
        await update.message.reply_text(
            "‚ùó –í–∏ –≤–∂–µ –º–∞—î—Ç–µ 8 –ª—ñ–º—ñ—Ç—ñ–≤. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—ñ—Ç—å –æ–¥–∏–Ω –∑ –Ω–∏—Ö, —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π."
        )
        await show_user_limits_menu(update, context)
        context.user_data["previous_menu"] = "limits_menu"
        return

    # –Ø–∫—â–æ –≤—Å–µ –≥–∞—Ä–∞–∑–¥ ‚Äì –∑–∞–ø–∏—Ç—É—î–º–æ —Å—É–º—É
    await update.message.reply_text(
        "üí¨ –í–ø–∏—à—ñ—Ç—å —Å—É–º—É –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É –Ω–∞ –≤—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –∞–±–æ —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é",
        reply_markup=ReplyKeyboardMarkup(
            [
                [KeyboardButton("–ó–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é")],
                [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
                [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
    )
    context.user_data["awaiting_limit_sum"] = True
    context.user_data["previous_menu"] = "new_limit"

async def show_user_limits_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # üî¥ –¢—É—Ç –±—É–¥–µ SQL-–∑–∞–ø–∏—Ç ‚Ññ13 –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤
    # limits = db.get_user_limits(user_id)  # –∑–∞–≥–ª—É—à–∫–∞
    limits = ["–õ—ñ–º—ñ—Ç 1", "–õ—ñ–º—ñ—Ç 2", "–õ—ñ–º—ñ—Ç 3"]  # –∑–∞–≥–ª—É—à–∫–∞

    keyboard = [[KeyboardButton(limit)] for limit in limits]
    keyboard.append([KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")])
    keyboard.append([KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üìã –í–∞—à—ñ –ª—ñ–º—ñ—Ç–∏:",
        reply_markup=reply_markup
    )
    context.user_data["previous_menu"] = "limits_menu"


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Ä–µ–∂–∏–º—ñ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏
    if context.user_data.get("awaiting_profit_sum"):
        if text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            context.user_data["awaiting_profit_sum"] = False
            await show_main_menu(update, context)
            return
        try:
            profit = float(text)
            await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ –ø—Ä–∏–±—É—Ç–æ–∫: {profit} –≥—Ä–Ω")
            context.user_data["profit_sum"] = profit ## –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤ –ë–î
            context.user_data["awaiting_profit_sum"] = False
            await show_after_adding_profit_menu(update, context)
        except ValueError:
            await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ!")
        return

        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" —É –±—É–¥—å-—è–∫–æ–º—É –º—ñ—Å—Ü—ñ
    if text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await show_main_menu(update, context)
        return

    if text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏":
        if context.user_data.get("awaiting_profit_sum") or context.user_data.get("profit_sum"):
            # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –ø—Ä–∏–±—É—Ç–∫—É
            profit_sum = context.user_data.get("profit_sum", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            source = context.user_data.get("selected_source", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            date = context.user_data.get("selected_date", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            comment = context.user_data.get("comment", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            # –¢–£–¢: SQL –¥–ª—è –ø—Ä–∏–±—É—Ç–∫—É (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
            result_message = (
                f"‚úÖ –ü—Ä–∏–±—É—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!\n\n"
                f"üí∞ –°—É–º–∞: {profit_sum}\n"
                f"üìå –î–∂–µ—Ä–µ–ª–æ: {source}\n"
                f"üóìÔ∏è –î–∞—Ç–∞: {date}\n"
                f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}"
            )
        elif context.user_data.get("awaiting_expense_sum") or context.user_data.get("expense_sum"):
            # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –≤–∏—Ç—Ä–∞—Ç–∏
            expense_sum = context.user_data.get("expense_sum", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            category = context.user_data.get("selected_category", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            subcategory = context.user_data.get("selected_subcategory", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            date = context.user_data.get("selected_date", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            comment = context.user_data.get("comment", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            # –¢–£–¢: SQL –¥–ª—è –≤–∏—Ç—Ä–∞—Ç–∏ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
            result_message = (
                f"‚úÖ –í–∏—Ç—Ä–∞—Ç—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!\n\n"
                f"üí∏ –°—É–º–∞: {expense_sum}\n"
                f"üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n"
                f"üìÇ –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {subcategory}\n"
                f"üóìÔ∏è –î–∞—Ç–∞: {date}\n"
                f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}"
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
            return

        await update.message.reply_text(result_message)
        context.user_data.clear()
        await show_main_menu(update, context)
        return

    if text == "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Å—É–º—É":
        context.user_data["awaiting_profit_sum"] = True
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Å—É–º—É:")
        return

    if text == "üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä":
        context.user_data["awaiting_comment_input"] = True
        # –í–∞–∂–ª–∏–≤–æ: –≤–∫–∞–∑—É—î–º–æ, –¥–ª—è —á–æ–≥–æ —Ü–µ–π –∫–æ–º–µ–Ω—Ç–∞—Ä
        context.user_data["current_mode"] = "profit" if context.user_data.get("awaiting_profit_sum") else "expense"
        await show_comment_menu(update)
        return

    if text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
        previous_menu = context.user_data.get("previous_menu", "main_menu")

        if previous_menu == "after_adding_expense":
            await show_after_adding_expense_menu(update, context)
        elif previous_menu == "after_adding_profit":
            await show_after_adding_profit_menu(update, context)
        elif previous_menu == "statistics":
            await show_statistics_menu(update)
            context.user_data["previous_menu"] = "main_menu"
        elif previous_menu == "graphs_menu":
            await show_graphs_menu(update, context, all_sources=context.user_data.get("graph_all_sources", False))
        elif previous_menu == "profit_statistics_period":
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–±—É—Ç–∫—É
            keyboard = [
                [KeyboardButton("–ó–∞ –≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥"), KeyboardButton("–ó–∞ —Ä—ñ–∫")],
                [KeyboardButton("–ó–∞ –º—ñ—Å—è—Ü—å"), KeyboardButton("–ó–∞ —Ç–∏–∂–¥–µ–Ω—å")],
                [KeyboardButton("–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"), KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–±—É—Ç–∫—É:",
                reply_markup=reply_markup
            )
            context.user_data["awaiting_period_input"] = True

        elif previous_menu == "expense_statistics_period":
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É –≤–∏—Ç—Ä–∞—Ç
            keyboard = [
                [KeyboardButton("–∑–∞ –≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥"), KeyboardButton("–∑–∞ —Ä—ñ–∫")],
                [KeyboardButton("–∑–∞ –º—ñ—Å—è—Ü—å"), KeyboardButton("–∑–∞ —Ç–∏–∂–¥–µ–Ω—å")],
                [KeyboardButton("–∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"), KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy:dd/mm/yyyy",
                reply_markup=reply_markup
            )
            context.user_data["awaiting_expense_period_input"] = True

        elif previous_menu == "graphs_menu_expense":
            # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –∑ –≤–∏–±–æ—Ä–æ–º "–∑–∞ —É—Å—ñ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏" —á–∏ "–æ–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"
            keyboard = [
                [KeyboardButton("–ó–∞ —É—Å—ñ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏")],
                [KeyboardButton("–û–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")],
                [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
                [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üîç –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
            context.user_data["previous_menu"] = "expense_statistics_period"

        elif previous_menu == "choose_expense_category":
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é "–∑–∞ —É—Å—ñ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ / –æ–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"
            keyboard = [
                [KeyboardButton("–ó–∞ —É—Å—ñ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏")],
                [KeyboardButton("–û–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")],
                [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
                [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üîç –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
            context.user_data["previous_menu"] = "expense_statistics_period"
            return

        elif previous_menu == "graphs_menu_choose_category":
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            categories = ["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 1", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 2", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 3", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 4", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 5", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 6",
                          "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 7", "–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏"]
            keyboard = [[KeyboardButton(cat)] for cat in categories]
            keyboard.append([KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è"), KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üóÇÔ∏è –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=reply_markup)
            context.user_data["previous_menu"] = "choose_expense_category"
            return

        elif previous_menu == "user_limits_menu":
            keyboard = [
                [KeyboardButton("–ú–æ—ó –ª—ñ–º—ñ—Ç–∏")],
                [KeyboardButton("–ù–æ–≤–∏–π –ª—ñ–º—ñ—Ç")],
                [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üîô –ú–µ–Ω—é –ª—ñ–º—ñ—Ç—ñ–≤:", reply_markup=reply_markup)

        elif previous_menu == "limits_menu":
            await show_limits_menu(update, context)
            context.user_data["previous_menu"] = "main_menu"
            return

        elif previous_menu == "limit_details":
            await show_user_limits_menu(update, context)
            context.user_data["previous_menu"] = "limits_menu"
            return

        else:
            await show_main_menu(update, context)
        return

    ## –¥–∞—Ç–∞
    if text == "üìÖ –î–∞—Ç–∞":
        context.user_data["awaiting_date_input"] = True
        # –í–∞–∂–ª–∏–≤–æ: –≤–∫–∞–∑—É—î–º–æ, –¥–µ –º–∏ ‚Äì —É –ø—Ä–∏–±—É—Ç–∫—É —á–∏ –≤–∏—Ç—Ä–∞—Ç—ñ
        context.user_data["current_mode"] = "profit" if context.user_data.get("awaiting_profit_sum") else "expense"
        await show_date_menu(update)
        return

    if text == "üìå –î–∂–µ—Ä–µ–ª–æ":
        context.user_data["awaiting_source_selection"] = "profit"  # –ú—ñ—Ç–∫–∞: –≤–∏–±—ñ—Ä –¥–∂–µ—Ä–µ–ª–∞ –¥–ª—è –ø—Ä–∏–±—É—Ç–∫—É
        await show_sources_menu(update)
        return

    if text in ["–î–∂–µ—Ä–µ–ª–æ 1", "–î–∂–µ—Ä–µ–ª–æ 2", "–î–∂–µ—Ä–µ–ª–æ 3", "–î–∂–µ—Ä–µ–ª–æ 4", "–î–∂–µ—Ä–µ–ª–æ 5", "–î–∂–µ—Ä–µ–ª–æ 6", "–î–∂–µ—Ä–µ–ª–æ 7",
                "–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏"]:
        if context.user_data.get("awaiting_source_selection") == "profit":
            await update.message.reply_text(f"‚úÖ –î–∂–µ—Ä–µ–ª–æ –æ–±—Ä–∞–Ω–æ: {text}")
            context.user_data["selected_source"] = text
        ## –¢—É—Ç —Ç—Ä–µ–±–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ SQL-–∑–∞–ø–∏—Ç 1

        ##
            context.user_data["selected_source"] = text ## –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤ –ë–î
            await show_after_adding_profit_menu(update, context)
            context.user_data.pop("awaiting_source_selection")  # –û—á–∏—â–∞—î–º–æ –º—ñ—Ç–∫—É
            return


    ## –í–≤–µ–¥–µ–Ω–Ω—è —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞—Ç–∏ –¥–ª—è –ø—Ä–∏–±—É—Ç–∫—É —Ç–∞ –≤–∏—Ç—Ä–∞—Ç
    if context.user_data.get("awaiting_date_input"):
        if text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            context.user_data["awaiting_date_input"] = False
            if context.user_data.get("current_mode") == "profit":
                await show_after_adding_profit_menu(update, context)
            else:
                await show_after_adding_expense_menu(update, context)
            return

        if text == "–°—å–æ–≥–æ–¥–Ω—ñ":
            date = datetime.now().strftime("%d/%m/%Y")
            context.user_data["selected_date"] = date
            await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {date}")
            context.user_data["awaiting_date_input"] = False
            if context.user_data.get("current_mode") == "profit":
                await show_after_adding_profit_menu(update, context)
            else:
                await show_after_adding_expense_menu(update, context)
            return

        if text == "–í—á–æ—Ä–∞":
            date = (datetime.now() - timedelta(days=1)).strftime("%d/%m/%Y")
            context.user_data["selected_date"] = date
            await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {date}")
            context.user_data["awaiting_date_input"] = False
            if context.user_data.get("current_mode") == "profit":
                await show_after_adding_profit_menu(update, context)
            else:
                await show_after_adding_expense_menu(update, context)
            return

        try:
            parsed_date = datetime.strptime(text, "%d/%m/%Y")
            context.user_data["selected_date"] = text
            await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {text}")
            context.user_data["awaiting_date_input"] = False
            if context.user_data.get("current_mode") == "profit":
                await show_after_adding_profit_menu(update, context)
            else:
                await show_after_adding_expense_menu(update, context)
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 05/06/2025"
            )
        return

    ## –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
    if context.user_data.get("awaiting_comment_input"):
        if text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            context.user_data["awaiting_comment_input"] = False
            if context.user_data.get("current_mode") == "profit":
                await show_after_adding_profit_menu(update, context)
            else:
                await show_after_adding_expense_menu(update, context)
            return

        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è: –¥–æ–≤–∂–∏–Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—è –≤—ñ–¥ 3 –¥–æ 200
        if 3 <= len(text) <= 200:
            context.user_data["comment"] = text
            await update.message.reply_text("‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ!")
            context.user_data["awaiting_comment_input"] = False
            if context.user_data.get("current_mode") == "profit":
                await show_after_adding_profit_menu(update, context)
            else:
                await show_after_adding_expense_menu(update, context)
        else:
            await update.message.reply_text(
                "‚ùå –ö–æ–º–µ–Ω—Ç–∞—Ä –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 3 –¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!"
            )
        return

    ## –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ –≤–∏—Ç—Ä–∞—Ç (–î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É)
    if context.user_data.get("awaiting_expense_sum"):
        if text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            context.user_data["awaiting_expense_sum"] = False
            await show_main_menu(update, context)
            return

        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è: —á–∏—Å–ª–æ > 0 —ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, < 100000
        try:
            expense = float(text)
            if expense <= 0 or expense > 100000:
                await update.message.reply_text("‚ùå –°—É–º–∞ –º–∞—î –±—É—Ç–∏ > 0 —ñ < 100000. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!")
                return
            context.user_data["expense_sum"] = expense
            await update.message.reply_text(f"‚úÖ –°—É–º—É –≤–∏—Ç—Ä–∞—Ç –¥–æ–¥–∞–Ω–æ: {expense} –≥—Ä–Ω")
            context.user_data["awaiting_expense_sum"] = False
            await show_after_adding_expense_menu(update, context)
        except ValueError:
            await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ!")
        return

    if text == "üìå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è":
        context.user_data["awaiting_category_input"] = True
        await show_categories_menu(update)
        return

    ## –í–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç
    if context.user_data.get("awaiting_category_input"):
        if text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            context.user_data["awaiting_category_input"] = False
            await show_after_adding_expense_menu(update, context)
            return
        if text in ["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 1", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 2", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 3", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 4", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 5", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 6",
                    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 7", "–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏"]:
            await update.message.reply_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –æ–±—Ä–∞–Ω–∞: {text}")
            context.user_data["selected_category"] = text
            ## –¢—É—Ç —Ç—Ä–µ–±–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ SQL-–∑–∞–ø–∏—Ç 3

            ##
            context.user_data["awaiting_category_input"] = False
            await show_after_adding_expense_menu(update, context)
        else:
            await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É!")
        return

    if text == "üìÇ –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è":
        context.user_data["awaiting_subcategory_input"] = True
        await show_subcategories_menu(update)
        return

    ## –º–µ–Ω—é –¥–ª—è –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π (–¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç)
    if context.user_data.get("awaiting_subcategory_input"):
        if text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            context.user_data["awaiting_subcategory_input"] = False
            await show_after_adding_expense_menu(update, context)
            return
        if text in ["–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 1", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 2", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 3", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 4", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 5",
                    "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 6", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 7", "–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏"]:
            await update.message.reply_text(f"‚úÖ –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è –æ–±—Ä–∞–Ω–∞: {text}")
            context.user_data["selected_subcategory"] = text
            ## –¢—É—Ç —Ç—Ä–µ–±–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ SQL-–∑–∞–ø–∏—Ç 4

            ##
            context.user_data["awaiting_subcategory_input"] = False
            await show_after_adding_expense_menu(update, context)
        else:
            await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É!")
        return

    if text == "üìà –ü–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–∏–±—É—Ç–∫—É":
        await show_profit_period_menu(update, context)
        return

    # –ü–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–∏–±—É—Ç–∫—É: –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä—ñ–æ–¥—É ## SQL-–∑–∞–ø–∏—Ç 7
    ## UPD: –¢—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –≤–∏–≤–µ–¥–µ–Ω–Ω—è –ø–æ 10 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    if context.user_data.get("awaiting_profit_period_input"):
        if text == "–ó–∞ –≤–µ—Å—å —á–∞—Å":
            await update.message.reply_text("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞ –≤–µ—Å—å —á–∞—Å.")
            # –¢–£–¢: SQL-–∑–∞–ø–∏—Ç ‚Ññ7 ‚Äî –≤—Å—ñ –∑–∞–ø–∏—Å–∏
            context.user_data["awaiting_profit_period_input"] = False
            return

        if text == "–ó–∞ —Ä—ñ–∫":
            start_date = (datetime.now() - timedelta(days=365)).strftime("%d/%m/%Y")
            end_date = datetime.now().strftime("%d/%m/%Y")
            await update.message.reply_text(f"‚úÖ –ü–µ—Ä—ñ–æ–¥: {start_date} ‚Äî {end_date}")
            # –¢–£–¢: SQL-–∑–∞–ø–∏—Ç ‚Ññ7 ‚Äî –∑–∞–ø–∏—Å–∏ –∑–∞ —Ä—ñ–∫
            context.user_data["awaiting_profit_period_input"] = False
            return

        if text == "–ó–∞ –º—ñ—Å—è—Ü—å":
            start_date = (datetime.now() - timedelta(days=30)).strftime("%d/%m/%Y")
            end_date = datetime.now().strftime("%d/%m/%Y")
            await update.message.reply_text(f"‚úÖ –ü–µ—Ä—ñ–æ–¥: {start_date} ‚Äî {end_date}")
            # –¢–£–¢: SQL-–∑–∞–ø–∏—Ç ‚Ññ7 ‚Äî –∑–∞–ø–∏—Å–∏ –∑–∞ –º—ñ—Å—è—Ü—å
            context.user_data["awaiting_profit_period_input"] = False
            return

        if text == "–ó–∞ —Ç–∏–∂–¥–µ–Ω—å":
            start_date = (datetime.now() - timedelta(days=7)).strftime("%d/%m/%Y")
            end_date = datetime.now().strftime("%d/%m/%Y")
            await update.message.reply_text(f"‚úÖ –ü–µ—Ä—ñ–æ–¥: {start_date} ‚Äî {end_date}")
            # –¢–£–¢: SQL-–∑–∞–ø–∏—Ç ‚Ññ7 ‚Äî –∑–∞–ø–∏—Å–∏ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
            context.user_data["awaiting_profit_period_input"] = False
            return

        if text == "–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ":
            date = datetime.now().strftime("%d/%m/%Y")
            await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞: {date}")
            # –¢–£–¢: SQL-–∑–∞–ø–∏—Ç ‚Ññ7 ‚Äî –∑–∞–ø–∏—Å–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
            context.user_data["awaiting_profit_period_input"] = False
            return

    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–≤–µ–¥–µ–Ω–æ–≥–æ –≤—Ä—É—á–Ω—É –ø–µ—Ä—ñ–æ–¥—É (—è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ)
    if ":" in text and context.user_data.get("awaiting_profit_period_input"):
        try:
            start_str, end_str = text.split(":")
            start_date = datetime.strptime(start_str.strip(), "%d/%m/%Y")
            end_date = datetime.strptime(end_str.strip(), "%d/%m/%Y")
            if start_date > end_date:
                await update.message.reply_text("‚ùå –ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—ñ–∑–Ω—ñ—à–æ—é –∑–∞ –∫—ñ–Ω—Ü–µ–≤—É!")
                return

            #### –¢—É—Ç —Ç—Ä–µ–±–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ SQL-–∑–∞–ø–∏—Ç ‚Ññ7
            await update.message.reply_text(f"‚úÖ –ü–µ—Ä—ñ–æ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {start_str} ‚Äî {end_str}")
            context.user_data["awaiting_profit_period_input"] = False
            ####
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy:dd/mm/yyyy"
            )
        return

    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_statistics_menu(update)
        context.user_data["previous_menu"] = "main_menu"
        return

    # ‚û°Ô∏è –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É ‚Ññ8 (–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—É—Ç–∫—É)
    if text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—É—Ç–∫—É":
        keyboard = [
            [KeyboardButton("–ó–∞ –≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥"), KeyboardButton("–ó–∞ —Ä—ñ–∫")],
            [KeyboardButton("–ó–∞ –º—ñ—Å—è—Ü—å"), KeyboardButton("–ó–∞ —Ç–∏–∂–¥–µ–Ω—å")],
            [KeyboardButton("–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"), KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy:dd/mm/yyyy",
            reply_markup=reply_markup
        )
        # –°—Ç–∞–≤–∏–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–∞–∑ –≤–≤–æ–¥–∏—Ç—å –ø–µ—Ä—ñ–æ–¥
        context.user_data["awaiting_period_input"] = True
        return

    # ‚û°Ô∏è –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É —É –°—Ç–∞—Ç–∏—Å—Ç–∏—Ü—ñ –ø—Ä–∏–±—É—Ç–∫—É
    if context.user_data.get("awaiting_period_input"):
        if text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            context.user_data["awaiting_period_input"] = False
            await show_main_menu(update, context)
            return

        # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É "–ó–∞ —Ä—ñ–∫", "–ó–∞ –º—ñ—Å—è—Ü—å", "–ó–∞ —Ç–∏–∂–¥–µ–Ω—å", "–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"
        now = datetime.now()
        if text == "–ó–∞ —Ä—ñ–∫":
            start_date = (now - timedelta(days=365)).strftime("%d/%m/%Y")
            end_date = now.strftime("%d/%m/%Y")
            await update.message.reply_text(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—É—Ç–∫—É –∑–∞ —Ä—ñ–∫ (–∑ {start_date} –ø–æ {end_date})")
            # üî¥ –ú—ñ—Å—Ü–µ –¥–ª—è SQL-–∑–∞–ø–∏—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, SQL SELECT –∑–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥)
        elif text == "–ó–∞ –º—ñ—Å—è—Ü—å":
            start_date = (now - timedelta(days=30)).strftime("%d/%m/%Y")
            end_date = now.strftime("%d/%m/%Y")
            await update.message.reply_text(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—É—Ç–∫—É –∑–∞ –º—ñ—Å—è—Ü—å (–∑ {start_date} –ø–æ {end_date})")
            # üî¥ –ú—ñ—Å—Ü–µ –¥–ª—è SQL-–∑–∞–ø–∏—Ç—É
        elif text == "–ó–∞ —Ç–∏–∂–¥–µ–Ω—å":
            start_date = (now - timedelta(days=7)).strftime("%d/%m/%Y")
            end_date = now.strftime("%d/%m/%Y")
            await update.message.reply_text(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—É—Ç–∫—É –∑–∞ —Ç–∏–∂–¥–µ–Ω—å (–∑ {start_date} –ø–æ {end_date})")
            # üî¥ –ú—ñ—Å—Ü–µ –¥–ª—è SQL-–∑–∞–ø–∏—Ç—É
        elif text == "–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ":
            date = now.strftime("%d/%m/%Y")
            await update.message.reply_text(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—É—Ç–∫—É –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {date}")
            # üî¥ –ú—ñ—Å—Ü–µ –¥–ª—è SQL-–∑–∞–ø–∏—Ç—É
        elif text == "–ó–∞ –≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥":
            await update.message.reply_text("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—É—Ç–∫—É –∑–∞ –≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥")
            # üî¥ –ú—ñ—Å—Ü–µ –¥–ª—è SQL-–∑–∞–ø–∏—Ç—É (—É—Å—ñ –∑–∞–ø–∏—Å–∏)
        elif ":" in text:  # –≤–≤–µ–¥–µ–Ω–æ –≤–ª–∞—Å–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
            try:
                start_str, end_str = text.split(":")
                start_date = datetime.strptime(start_str.strip(), "%d/%m/%Y")
                end_date = datetime.strptime(end_str.strip(), "%d/%m/%Y")
                if start_date > end_date:
                    await update.message.reply_text("‚ùå –ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—ñ–∑–Ω—ñ—à–æ—é –∑–∞ –∫—ñ–Ω—Ü–µ–≤—É!")
                    return
                await update.message.reply_text(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—É—Ç–∫—É –∑–∞ –ø–µ—Ä—ñ–æ–¥: {start_str} ‚Äî {end_str}")
                # üî¥ –ú—ñ—Å—Ü–µ –¥–ª—è SQL-–∑–∞–ø–∏—Ç—É
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy:dd/mm/yyyy")
                return
        else:
            await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É!")
            return

        # –ü—ñ—Å–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ‚Äì –ø–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –º–µ–Ω—é
        keyboard = [
            [KeyboardButton("–ó–∞ —É—Å—ñ–º–∞ –¥–∂–µ—Ä–µ–ª–∞–º–∏")],
            [KeyboardButton("–û–±—Ä–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ")],
            [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
            [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("üîç –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å, —â–æ–± –∑–Ω–∞—Ç–∏, –∫—É–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—è
        context.user_data["previous_menu"] = "profit_statistics_period"
        context.user_data["awaiting_period_input"] = False
        return

    if text == "–ó–∞ —É—Å—ñ–º–∞ –¥–∂–µ—Ä–µ–ª–∞–º–∏":
        context.user_data["graph_all_sources"] = True
        await show_graphs_menu(update, context, all_sources=True)
        context.user_data["previous_menu"] = "statistics"
        return

    # ‚û°Ô∏è –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ (—É—Å—ñ –¥–∂–µ—Ä–µ–ª–∞)
    if context.user_data.get("previous_menu") == "graphs_menu" and context.user_data.get("graph_all_sources"):
        if text == "Pie Chart":
            # üî¥ –ú—ñ—Å—Ü–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó / SQL –≥—Ä–∞—Ñ—ñ–∫–∞ "Pie Chart"
            await update.message.reply_text("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä–∞—Ñ—ñ–∫: Pie Chart")
            # –¢–£–¢: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞
            await update.message.reply_text("üìä –ì—Ä–∞—Ñ—ñ–∫ Pie Chart –≥–æ—Ç–æ–≤–∏–π! (—ñ–Ω—Ç–µ–≥—Ä—É—î—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ)")
        elif text == "Bars":
            # üî¥ –ú—ñ—Å—Ü–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó / SQL –≥—Ä–∞—Ñ—ñ–∫–∞ "Bars"
            await update.message.reply_text("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä–∞—Ñ—ñ–∫: Bars")
            # –¢–£–¢: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞
            await update.message.reply_text("üìä –ì—Ä–∞—Ñ—ñ–∫ Bars –≥–æ—Ç–æ–≤–∏–π! (—ñ–Ω—Ç–µ–≥—Ä—É—î—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ)")
        elif text == "Scatter Plot":
            # üî¥ –ú—ñ—Å—Ü–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó / SQL –≥—Ä–∞—Ñ—ñ–∫–∞ "Scatter Plot"
            await update.message.reply_text("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä–∞—Ñ—ñ–∫: Scatter Plot")
            # –¢–£–¢: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞
            await update.message.reply_text("üìä –ì—Ä–∞—Ñ—ñ–∫ Scatter Plot –≥–æ—Ç–æ–≤–∏–π! (—ñ–Ω—Ç–µ–≥—Ä—É—î—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ)")
        elif text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≤–∏–±–æ—Ä—É "–ó–∞ —É—Å—ñ–º–∞ –¥–∂–µ—Ä–µ–ª–∞–º–∏" / "–û–±—Ä–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ"
            keyboard = [
                [KeyboardButton("–ó–∞ —É—Å—ñ–º–∞ –¥–∂–µ—Ä–µ–ª–∞–º–∏")],
                [KeyboardButton("–û–±—Ä–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ")],
                [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
                [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üîç –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
            context.user_data["previous_menu"] = "profit_statistics_period"
            return
        elif text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            await show_main_menu(update, context)
            return
        else:
            await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É!")
            return

        # ‚úÖ –ü—ñ—Å–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ ‚Äì –≤–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–º–æ–∂–µ—à –∑–∞–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç SQL)
        await update.message.reply_text("üìà –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: (—Å—é–¥–∏ –ø—ñ–∑–Ω—ñ—à–µ –ø—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è SQL)")

        # ‚úÖ –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        await show_main_menu(update, context)
        return

    # ‚û°Ô∏è –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±—Ä–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ"
    if text == "–û–±—Ä–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ":
        # –¢—É—Ç –±—É–¥–µ SQL-–∑–∞–ø–∏—Ç ‚Ññ1 (–æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 1-7)
        # –ó–∞—Ä–∞–∑ –∑–∞–≥–ª—É—à–∫–∞ - –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∂–µ—Ä–µ–ª:
        keyboard = [
            [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 1"), KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 2")],
            [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 3"), KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 4")],
            [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 5"), KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 6")],
            [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 7"), KeyboardButton("–ù–µ –≤–∫–∞–∑–∞–Ω–æ")],
            [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
            [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("üîé –û–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ:", reply_markup=reply_markup)
        context.user_data["previous_menu"] = "choose_source"
        return

    # ‚û°Ô∏è –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞
    if context.user_data.get("previous_menu") == "choose_source":
        if text.startswith("–î–∂–µ—Ä–µ–ª–æ") or text == "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
            await update.message.reply_text(f"‚úÖ –î–∂–µ—Ä–µ–ª–æ –æ–±—Ä–∞–Ω–æ: {text}")
            # –¢—É—Ç –±—É–¥–µ SQL-–∑–∞–ø–∏—Ç ‚Ññ9 (–∑–∞–ø–∏—Å–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –¥–∂–µ—Ä–µ–ª—É)
            # –ó–∞–≥–ª—É—à–∫–∞ ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await update.message.reply_text("üìä –î–∞–Ω—ñ –∑–∞ –æ–±—Ä–∞–Ω–∏–º –¥–∂–µ—Ä–µ–ª–æ–º –æ—Ç—Ä–∏–º–∞–Ω–æ! (—ñ–Ω—Ç–µ–≥—Ä—É—î—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ)")

            # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ (–±–µ–∑ Pie Chart)
            keyboard = [
                [KeyboardButton("Bars")],
                [KeyboardButton("Scatter Plot")],
                [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
                [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üìä –û–±–µ—Ä—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:", reply_markup=reply_markup)
            context.user_data["previous_menu"] = "graphs_menu_choose_source"
            return
        elif text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≤–∏–±–æ—Ä—É "–ó–∞ —É—Å—ñ–º–∞ –¥–∂–µ—Ä–µ–ª–∞–º–∏" / "–û–±—Ä–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ"
            keyboard = [
                [KeyboardButton("–ó–∞ —É—Å—ñ–º–∞ –¥–∂–µ—Ä–µ–ª–∞–º–∏")],
                [KeyboardButton("–û–±—Ä–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ")],
                [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
                [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üîç –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
            context.user_data["previous_menu"] = "profit_statistics_period"
            return
        elif text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            await show_main_menu(update, context)
            return
        else:
            await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ –∑—ñ —Å–ø–∏—Å–∫—É!")
            return

    # ‚û°Ô∏è –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≥—Ä–∞—Ñ—ñ–∫–∞ (–¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞)
    if context.user_data.get("previous_menu") == "graphs_menu_choose_source":
        if text == "Bars":
            # üî¥ –ú—ñ—Å—Ü–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó / SQL-–∑–∞–ø–∏—Ç—É "Bars" –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞
            await update.message.reply_text("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä–∞—Ñ—ñ–∫: Bars")
            # –¢–£–¢: —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞
            await update.message.reply_text("üìä –ì—Ä–∞—Ñ—ñ–∫ Bars –≥–æ—Ç–æ–≤–∏–π! (—ñ–Ω—Ç–µ–≥—Ä—É—î—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ)")
        elif text == "Scatter Plot":
            # üî¥ –ú—ñ—Å—Ü–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó / SQL-–∑–∞–ø–∏—Ç—É "Scatter Plot" –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞
            await update.message.reply_text("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä–∞—Ñ—ñ–∫: Scatter Plot")
            # –¢–£–¢: —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞
            await update.message.reply_text("üìä –ì—Ä–∞—Ñ—ñ–∫ Scatter Plot –≥–æ—Ç–æ–≤–∏–π! (—ñ–Ω—Ç–µ–≥—Ä—É—î—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ)")
        elif text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≤–∏–±–æ—Ä—É –¥–∂–µ—Ä–µ–ª–∞
            keyboard = [
                [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 1"), KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 2")],
                [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 3"), KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 4")],
                [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 5"), KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 6")],
                [KeyboardButton("–î–∂–µ—Ä–µ–ª–æ 7"), KeyboardButton("–ù–µ –≤–∫–∞–∑–∞–Ω–æ")],
                [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
                [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üîé –û–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ:", reply_markup=reply_markup)
            context.user_data["previous_menu"] = "choose_source"
            return
        elif text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            await show_main_menu(update, context)
            return
        else:
            await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ –∑—ñ —Å–ø–∏—Å–∫—É!")
            return

        # ‚úÖ –ü—ñ—Å–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ ‚Äì –≤–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await update.message.reply_text("üìà –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: (—Å—é–¥–∏ –ø—ñ–∑–Ω—ñ—à–µ –ø—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è SQL)")

        # ‚úÖ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        await show_main_menu(update, context)
        return

    if text == "üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç":
        keyboard = [
            [KeyboardButton("–∑–∞ –≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥"), KeyboardButton("–∑–∞ —Ä—ñ–∫")],
            [KeyboardButton("–∑–∞ –º—ñ—Å—è—Ü—å"), KeyboardButton("–∑–∞ —Ç–∏–∂–¥–µ–Ω—å")],
            [KeyboardButton("–∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"), KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy:dd/mm/yyyy",
            reply_markup=reply_markup
        )
        context.user_data["awaiting_expense_period_input"] = True
        context.user_data["previous_menu"] = "expense_period_selection"
        return

    if context.user_data.get("awaiting_expense_period_input"):
        if text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É (—Ü–µ–π –±–ª–æ–∫, –∞ –Ω–µ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é!)
            keyboard = [
                [KeyboardButton("–∑–∞ –≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥"), KeyboardButton("–∑–∞ —Ä—ñ–∫")],
                [KeyboardButton("–∑–∞ –º—ñ—Å—è—Ü—å"), KeyboardButton("–∑–∞ —Ç–∏–∂–¥–µ–Ω—å")],
                [KeyboardButton("–∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"), KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy:dd/mm/yyyy",
                reply_markup=reply_markup
            )
            return

        if text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            context.user_data["awaiting_expense_period_input"] = False
            await show_main_menu(update, context)
            return

        now = datetime.now()
        recognized = False

        if text.lower() == "–∑–∞ —Ä—ñ–∫":
            start_date = (now - timedelta(days=365)).strftime("%d/%m/%Y")
            end_date = now.strftime("%d/%m/%Y")
            await update.message.reply_text(f"üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ —Ä—ñ–∫ (–∑ {start_date} –ø–æ {end_date})")
            recognized = True
        elif text.lower() == "–∑–∞ –º—ñ—Å—è—Ü—å":
            start_date = (now - timedelta(days=30)).strftime("%d/%m/%Y")
            end_date = now.strftime("%d/%m/%Y")
            await update.message.reply_text(f"üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ –º—ñ—Å—è—Ü—å (–∑ {start_date} –ø–æ {end_date})")
            recognized = True
        elif text.lower() == "–∑–∞ —Ç–∏–∂–¥–µ–Ω—å":
            start_date = (now - timedelta(days=7)).strftime("%d/%m/%Y")
            end_date = now.strftime("%d/%m/%Y")
            await update.message.reply_text(f"üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ —Ç–∏–∂–¥–µ–Ω—å (–∑ {start_date} –ø–æ {end_date})")
            recognized = True
        elif text.lower() == "–∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ":
            date = now.strftime("%d/%m/%Y")
            await update.message.reply_text(f"üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {date}")
            recognized = True
        elif text.lower() == "–∑–∞ –≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥":
            await update.message.reply_text("üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ –≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥")
            recognized = True
        elif ":" in text:  # –í–≤–µ–¥–µ–Ω–æ –≤–ª–∞—Å–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
            try:
                start_str, end_str = text.split(":")
                start_date = datetime.strptime(start_str.strip(), "%d/%m/%Y")
                end_date = datetime.strptime(end_str.strip(), "%d/%m/%Y")
                if start_date > end_date:
                    await update.message.reply_text("‚ùå –ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—ñ–∑–Ω—ñ—à–æ—é –∑–∞ –∫—ñ–Ω—Ü–µ–≤—É!")
                    return
                await update.message.reply_text(f"üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–µ—Ä—ñ–æ–¥: {start_str} ‚Äî {end_str}")
                recognized = True
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy:dd/mm/yyyy")
                return

        if recognized:
            # –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É/–≤–≤–µ–¥–µ–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É ‚Äì –ø–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –º–µ–Ω—é
            keyboard = [
                [KeyboardButton("–ó–∞ —É—Å—ñ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏")],
                [KeyboardButton("–û–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")],
                [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
                [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üîç –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)

            context.user_data["previous_menu"] = "expense_statistics_period"
            context.user_data["awaiting_expense_period_input"] = False
        else:
            await update.message.reply_text(
                "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy:dd/mm/yyyy")
        return

    if text == "üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç": ## –Ω–µ –∑–Ω–∞–π—à–æ–≤ –∫—Ä–∞—â–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –ø–æ—Ñ—ñ–∫—Å–∏—Ç–∏ –±–∞–≥ –∑ —Ü—ñ—î—é –∫–Ω–æ–ø–∫–æ—é
        keyboard = [
            [KeyboardButton("–∑–∞ –≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥"), KeyboardButton("–∑–∞ —Ä—ñ–∫")],
            [KeyboardButton("–∑–∞ –º—ñ—Å—è—Ü—å"), KeyboardButton("–∑–∞ —Ç–∏–∂–¥–µ–Ω—å")],
            [KeyboardButton("–∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"), KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üóìÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ dd/mm/yyyy:dd/mm/yyyy",
            reply_markup=reply_markup
        )
        context.user_data["awaiting_expense_period_input"] = True
        context.user_data["previous_menu"] = "expense_period_selection"
        return

    if text == "–ó–∞ —É—Å—ñ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏":
        # –ü—ñ–¥ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –æ–±—Ä–æ–±–∫–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
        context.user_data["expense_graph_all_categories"] = True

        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
        keyboard = [
            [KeyboardButton("Pie Chart")],
            [KeyboardButton("Bars")],
            [KeyboardButton("Scatter Plot")],
            [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
            [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("üìä –û–±–µ—Ä—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è:", reply_markup=reply_markup)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –º–µ–Ω—é –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è"
        context.user_data["previous_menu"] = "graphs_menu_expense"
        return

    if context.user_data.get("previous_menu") == "graphs_menu_expense" and context.user_data.get(
            "expense_graph_all_categories"):
        if text == "Pie Chart":
            # –ú—ñ—Å—Ü–µ –¥–ª—è SQL-–∑–∞–ø–∏—Ç—É (–æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑–∞ –≤—Å—ñ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ —ñ –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ Pie Chart)
            await update.message.reply_text("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä–∞—Ñ—ñ–∫: Pie Chart")
            await update.message.reply_text("üìä –ì—Ä–∞—Ñ—ñ–∫ Pie Chart –≥–æ—Ç–æ–≤–∏–π! (—Å—é–¥–∏ –ø—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è SQL-–∑–∞–ø–∏—Ç)")
        elif text == "Bars":
            # –ú—ñ—Å—Ü–µ –¥–ª—è SQL-–∑–∞–ø–∏—Ç—É (–æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑–∞ –≤—Å—ñ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ —ñ –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ Bars)
            await update.message.reply_text("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä–∞—Ñ—ñ–∫: Bars")
            await update.message.reply_text("üìä –ì—Ä–∞—Ñ—ñ–∫ Bars –≥–æ—Ç–æ–≤–∏–π! (—Å—é–¥–∏ –ø—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è SQL-–∑–∞–ø–∏—Ç)")
        elif text == "Scatter Plot":
            # –ú—ñ—Å—Ü–µ –¥–ª—è SQL-–∑–∞–ø–∏—Ç—É (–æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑–∞ –≤—Å—ñ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ —ñ –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ Scatter Plot)
            await update.message.reply_text("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä–∞—Ñ—ñ–∫: Scatter Plot")
            await update.message.reply_text("üìä –ì—Ä–∞—Ñ—ñ–∫ Scatter Plot –≥–æ—Ç–æ–≤–∏–π! (—Å—é–¥–∏ –ø—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è SQL-–∑–∞–ø–∏—Ç)")
        elif text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –æ–ø—Ü—ñ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏—Ç—Ä–∞—Ç
            keyboard = [
                [KeyboardButton("–ó–∞ —É—Å—ñ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏")],
                [KeyboardButton("–û–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")],
                [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
                [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üîç –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
            context.user_data["previous_menu"] = "expense_statistics_period"
            return
        elif text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            await show_main_menu(update, context)
            return
        else:
            await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É!")
            return

        # ‚úÖ –ü—ñ—Å–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        await update.message.reply_text("üîÑ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é...")
        context.user_data["previous_menu"] = "main_menu"
        await show_main_menu(update, context)
        return

    if text == "–û–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é":
        # üü° –¢—É—Ç –±—É–¥–µ SQL-–∑–∞–ø–∏—Ç ‚Ññ3 (–æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)
        categories = ["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 1", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 2", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 3", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 4", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 5", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 6",
                      "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 7", "–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏"]

        keyboard = [[KeyboardButton(cat)] for cat in categories]
        keyboard.append([KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è"), KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("üóÇÔ∏è –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=reply_markup)

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å-—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
        context.user_data["previous_menu"] = "choose_expense_category"
        return

    if context.user_data.get("previous_menu") == "choose_expense_category":
        if text in ["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 1", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 2", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 3", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 4", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 5", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 6",
                    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 7", "–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏"]:
            await update.message.reply_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –æ–±—Ä–∞–Ω–∞: {text}")
            context.user_data["selected_expense_category"] = text
            # üü° –ú—ñ—Å—Ü–µ –¥–ª—è SQL-–∑–∞–ø–∏—Ç—É ‚Ññ11 (–æ–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Å—ñ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)

            keyboard = [
                [KeyboardButton("Pie Chart")],
                [KeyboardButton("Bars")],
                [KeyboardButton("Scatter Plot")],
                [KeyboardButton("–û–±—Ä–∞—Ç–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é")],
                [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è"), KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üìä –û–±–µ—Ä—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ –∞–±–æ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=reply_markup)

            context.user_data["previous_menu"] = "graphs_menu_choose_category"
            return

        elif text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            keyboard = [
                [KeyboardButton("–ó–∞ —É—Å—ñ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏")],
                [KeyboardButton("–û–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")],
                [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
                [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üîç –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
            context.user_data["previous_menu"] = "expense_statistics_period"
            return

        elif text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            await show_main_menu(update, context)
            return

        else:
            await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É!")
            return

    # –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    if context.user_data.get("previous_menu") == "choose_expense_subcategory":
        if text in ["–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 1", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 2", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 3", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 4", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 5",
                    "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 6", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 7", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"]:
            await update.message.reply_text(f"‚úÖ –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è –æ–±—Ä–∞–Ω–∞: {text}")
            context.user_data["selected_subcategory"] = text
            # üî¥ –¢—É—Ç –±—É–¥–µ SQL-–∑–∞–ø–∏—Ç ‚Ññ4 (–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ (–±–µ–∑ Pie Chart)
            keyboard = [
                [KeyboardButton("Bars")],
                [KeyboardButton("Scatter Plot")],
                [KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
                [KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üìä –û–±–µ—Ä—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:", reply_markup=reply_markup)
            context.user_data["previous_menu"] = "graphs_menu_expense_subcategory"
            return
        elif text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            await show_expense_subcategories_menu(update, context)  # –∞–±–æ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
            return
        elif text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            await show_main_menu(update, context)
            return
        else:
            await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É!")
            return

    # –û–±—Ä–æ–±–∫–∞ –º–µ–Ω—é –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –∞–±–æ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    if context.user_data.get("previous_menu") == "graphs_menu_choose_category":
        if text == "Pie Chart":
            await update.message.reply_text("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä–∞—Ñ—ñ–∫: Pie Chart")
            await update.message.reply_text("üìä –ì—Ä–∞—Ñ—ñ–∫ Pie Chart –≥–æ—Ç–æ–≤–∏–π! (—Å—é–¥–∏ –ø—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è SQL-–∑–∞–ø–∏—Ç)")
            context.user_data["previous_menu"] = "main_menu"
            await show_main_menu(update, context)
            return
        elif text == "Bars":
            await update.message.reply_text("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä–∞—Ñ—ñ–∫: Bars")
            await update.message.reply_text("üìä –ì—Ä–∞—Ñ—ñ–∫ Bars –≥–æ—Ç–æ–≤–∏–π! (—Å—é–¥–∏ –ø—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è SQL-–∑–∞–ø–∏—Ç)")
            context.user_data["previous_menu"] = "main_menu"
            await show_main_menu(update, context)
            return
        elif text == "Scatter Plot":
            await update.message.reply_text("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä–∞—Ñ—ñ–∫: Scatter Plot")
            await update.message.reply_text("üìä –ì—Ä–∞—Ñ—ñ–∫ Scatter Plot –≥–æ—Ç–æ–≤–∏–π! (—Å—é–¥–∏ –ø—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è SQL-–∑–∞–ø–∏—Ç)")
            context.user_data["previous_menu"] = "main_menu"
            await show_main_menu(update, context)
            return
        elif text == "–û–±—Ä–∞—Ç–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é":
            await show_expense_subcategories_menu(update, context)
            return
        elif text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            categories = ["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 1", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 2", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 3", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 4", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 5", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 6",
                          "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 7", "–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏"]
            keyboard = [[KeyboardButton(cat)] for cat in categories]
            keyboard.append([KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è"), KeyboardButton("‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üóÇÔ∏è –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=reply_markup)
            context.user_data["previous_menu"] = "choose_expense_category"
            return
        elif text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            await show_main_menu(update, context)
            return
        else:
            await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É!")
            return


    if context.user_data.get("previous_menu") == "graphs_menu_expense_subcategory":
        if text == "Bars":
            await update.message.reply_text("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä–∞—Ñ—ñ–∫: Bars")
            await update.message.reply_text("üìä –ì—Ä–∞—Ñ—ñ–∫ Bars –≥–æ—Ç–æ–≤–∏–π! (—Å—é–¥–∏ –ø—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è SQL-–∑–∞–ø–∏—Ç)")
            context.user_data["previous_menu"] = "main_menu"
            await show_main_menu(update, context)
            return
        elif text == "Scatter Plot":
            await update.message.reply_text("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä–∞—Ñ—ñ–∫: Scatter Plot")
            await update.message.reply_text("üìä –ì—Ä–∞—Ñ—ñ–∫ Scatter Plot –≥–æ—Ç–æ–≤–∏–π! (—Å—é–¥–∏ –ø—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è SQL-–∑–∞–ø–∏—Ç)")
            context.user_data["previous_menu"] = "main_menu"
            await show_main_menu(update, context)
            return
        elif text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            await show_expense_subcategories_menu(update, context)
            return
        elif text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            await show_main_menu(update, context)
            return
        else:
            await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ –∑—ñ —Å–ø–∏—Å–∫—É!")
            return

    if text == "–ú–æ—ó –ª—ñ–º—ñ—Ç–∏":
        await show_user_limits_menu(update, context)
        return

    if text == "üî¢ –õ—ñ–º—ñ—Ç–∏":
        await show_limits_menu(update, context)
        context.user_data["previous_menu"] = "main_menu"
        return

    if context.user_data.get("previous_menu") == "limits_menu":
        if text in ["–õ—ñ–º—ñ—Ç 1", "–õ—ñ–º—ñ—Ç 2", "–õ—ñ–º—ñ—Ç 3"]:
            await show_limit_details(update, context, text)
            context.user_data["selected_limit"] = text
            return
        elif text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            await show_limits_menu(update, context)
            return
        elif text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            await show_main_menu(update, context)
            return

    if context.user_data.get("previous_menu") == "limit_details":
        if text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏":
            # üî¥ –ü–Ü–î SQL: –≤–∏–¥–∞–ª–∏—Ç–∏ –ª—ñ–º—ñ—Ç –∑ –ë–î –∑–∞ –Ω–∞–∑–≤–æ—é context.user_data["selected_limit"]
            # delete_limit(context.user_data["selected_limit"])
            await update.message.reply_text(
                "‚úÖ –õ—ñ–º—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –π–æ–≥–æ –∑–Ω–æ–≤—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –æ–ø—Ü—ñ—ó '–ù–æ–≤–∏–π –ª—ñ–º—ñ—Ç'"
            )
            await show_limits_menu(update, context)
            return
        elif text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            await show_user_limits_menu(update, context)
            return
        elif text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            await show_main_menu(update, context)
            return

    if text == "–ù–æ–≤–∏–π –ª—ñ–º—ñ—Ç":
        await handle_new_limit(update, context)
        return

    if context.user_data.get("awaiting_limit_sum"):
        if text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            context.user_data.pop("awaiting_limit_sum")
            await show_user_limits_menu(update, context)
            context.user_data["previous_menu"] = "limits_menu"
            return
        elif text == "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            context.user_data.pop("awaiting_limit_sum")
            await show_main_menu(update, context)
            return
        elif text == "–ó–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é":
            # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (–ø—Ä–∏–∫–ª–∞–¥–Ω–∏–π –≤–∏–∫–ª–∏–∫ —Ç–≤–æ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó)
            context.user_data.pop("awaiting_limit_sum", None)
            await show_categories_menu(update)
            context.user_data["previous_menu"] = "new_limit_category"
            return
        else:
            try:
                limit_sum = float(text)
                # üî¥ SQL-–∑–∞–ø–∏—Ç ‚Ññ14 ‚Äì —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É –∑ —Å—É–º–æ—é
                await update.message.reply_text(
                    f"‚úÖ –õ—ñ–º—ñ—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {limit_sum} –≥—Ä–Ω. –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø—ñ–∑–Ω—ñ—à–µ."
                )
                await show_user_limits_menu(update, context)
                context.user_data.pop("awaiting_limit_sum")
                return
            except ValueError:
                await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ!")
                return

    if text == "–ó–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é":
        # üî¥ SQL-–∑–∞–ø–∏—Ç ‚Ññ3 (–æ—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
        categories = ["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 1", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 2", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 3", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 4", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 5", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 6",
                      "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 7", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"]
        keyboard = [[KeyboardButton(cat)] for cat in categories]
        keyboard.append([KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è"), KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("üóÇÔ∏è –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=reply_markup)
        context.user_data["previous_menu"] = "new_limit_category"
        return

    if context.user_data.get("previous_menu") == "new_limit_category":
        if text in ["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 1", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 2", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 3", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 4", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 5", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 6",
                    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 7", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"]:
            context.user_data["selected_limit_category"] = text
            await update.message.reply_text(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –æ–±—Ä–∞–Ω–∞: {text}\n\n–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –ª—ñ–º—ñ—Ç—É –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é.",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton("–ó–∞ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é")],
                    [KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è")],
                    [KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
                ], resize_keyboard=True)
            )
            context.user_data["previous_menu"] = "new_limit_selected_category"
            return
        elif text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è —É –º–µ–Ω—é "–ù–æ–≤–∏–π –ª—ñ–º—ñ—Ç"
            await handle_new_limit(update, context)
            return
        elif text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            await show_main_menu(update, context)
            return
        else:
            await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É!")
            return

    if context.user_data.get("previous_menu") == "new_limit_selected_category":
        if text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
            # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            categories = ["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 1", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 2", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 3", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 4", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 5", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 6",
                          "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è 7", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"]
            keyboard = [[KeyboardButton(cat)] for cat in categories]
            keyboard.append([KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è"), KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üóÇÔ∏è –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=reply_markup)
            context.user_data["previous_menu"] = "new_limit_category"
            return
        elif text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            await show_main_menu(update, context)
            return
        elif text == "–ó–∞ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é":
            # üî¥ SQL: –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            subcategories = ["–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 1", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 2", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 3", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 4", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è 5",
                             "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"]
            keyboard = [[KeyboardButton(sub)] for sub in subcategories]
            keyboard.append([KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è"), KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üìÇ –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=reply_markup)
            context.user_data["previous_menu"] = "new_limit_subcategory"
            return
        else:
            # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –°–£–ú–£ –ª—ñ–º—ñ—Ç—É –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            try:
                limit_sum = float(text)
                # üî¥ SQL-–∑–∞–ø–∏—Ç ‚Ññ14 (–∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª—ñ–º—ñ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)
                await update.message.reply_text(
                    f"‚úÖ –õ—ñ–º—ñ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{context.user_data.get('selected_limit_category', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}' –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {limit_sum} –≥—Ä–Ω."
                )
                await show_user_limits_menu(update, context)
                context.user_data.pop("previous_menu")
                context.user_data.pop("selected_limit_category")
                return
            except ValueError:
                await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é!")
                return


# ‚û°Ô∏è –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Update {update} caused error {context.error}")

# ‚û°Ô∏è –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
def main():
    print("‚úÖ –°—Ç–∞—Ä—Ç—É—î–º–æ –±–æ—Ç–∞...")
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏$"), handle_start_button))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–±—É—Ç–æ–∫$"), add_profit_button))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É$"), add_expense_button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_error_handler(error)

    print("ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î (polling)...")
    application.run_polling(poll_interval=1)

if __name__ == "__main__":
    main()
